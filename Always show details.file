Always show details
code_content = """\
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, classification_report
import numpy as np

# ======================================================
# Load MITERRA EUROPE dataset (replace with your dataset)
# ======================================================
# Example: data contains nutrient balances, emissions, etc.
# Target column should be either numeric (for regression)
# or categorical (for classification).

data = pd.read_csv("miterra_data.csv")

# ------------------------
# Choose Target Variable
# ------------------------
# For regression example (numeric target)
target_column = "nitrogen_surplus"

# For classification example (categorical target)
# target_column = "sustainability_class"

X = data.drop(target_column, axis=1)
y = data[target_column]

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ======================================================
# Regression Task (if target is numeric)
# ======================================================
if np.issubdtype(y.dtype, np.number):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)

    print("=== Random Forest Regression Results ===")
    print(f"RMSE: {rmse:.4f}")
    print(f"RÂ² Score: {r2:.4f}")

# ======================================================
# Classification Task (if target is categorical)
# ======================================================
else:
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    acc = accuracy_score(y_test, y_pred)

    print("=== Random Forest Classification Results ===")
    print(f"Accuracy: {acc:.4f}")
    print("Classification Report:")
    print(classification_report(y_test, y_pred))
"""

# Save to file
file_path = "/mnt/data/miterra_ml_model.py"
with open(file_path, "w") as f:
    f.write(code_content)

file_path

Result
'/mnt/data/miterra_ml_model.py'

Iâ€™ve created a Python script for you:

ðŸ“‚ Download miterra_ml_model.py

You can run it like this:

python miterra_ml_model.py


Just replace "miterra_data.csv" with your MITERRA dataset file and update the target_column depending on whether youâ€™re doing regression (numeric) or classification (categorical).

Do you want me to also create a sample CSV file with fake MITERRA-like data so you can test the script immediately? 

ChatGPT can make mistakes. C